// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['text!templates/pagination.html'], function(template) {
  var _ref;
  return Forum.Views.PaginationView = (function(_super) {
    __extends(PaginationView, _super);

    function PaginationView() {
      _ref = PaginationView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PaginationView.prototype.template = _.template(template);

    PaginationView.prototype.initialize = function(options) {
      this.currentPage = parseInt(options.currentPage);
      return this.totalPages = Math.ceil(options.items / options.chunk);
    };

    PaginationView.prototype.serializeData = function() {
      var data;
      data = PaginationView.__super__.serializeData.call(this);
      data.currentPage = this.currentPage;
      data.totalPages = this.totalPages;
      data.pages = this._pagesArray();
      return data;
    };

    PaginationView.prototype._pagesArray = function() {
      var i, pages;
      pages = [];
      i = 1;
      while (i <= this.totalPages) {
        pages.push(i);
        i++;
      }
      return pages;
    };

    PaginationView.prototype.render = function() {
      if (this.totalPages && this.totalPages > 1) {
        return PaginationView.__super__.render.call(this);
      }
    };

    PaginationView.prototype.templateHelpers = {
      pageUrl: function(page) {
        return "#/page-" + page;
      },
      nextPageUrl: function() {
        return this.pageUrl(this.currentPage + 1);
      },
      prevPageUrl: function() {
        return this.pageUrl(this.currentPage - 1);
      },
      currentPageClass: function(page) {
        if (page === this.currentPage) {
          return 'active';
        } else {
          return '';
        }
      },
      prevPage: function() {
        return this.currentPage !== 1;
      },
      nextPage: function() {
        return this.currentPage !== this.totalPages;
      }
    };

    return PaginationView;

  })(Backbone.Marionette.ItemView);
});
